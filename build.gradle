/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'java'
    id 'org.openjfx.javafxplugin' version '0.0.14'
    id 'org.beryx.jlink' version '2.26.0'
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation 'org.openjfx:javafx-controls:22.0.2'
    implementation 'org.openjfx:javafx-fxml:22.0.2'
    implementation 'org.openjfx:javafx:22.0.1'
    implementation 'org.apache.commons:commons-csv:1.9.0'
    implementation 'org.apache.poi:poi:5.2.3'
   implementation 'org.apache.poi:poi-ooxml:5.2.3'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

javafx {
    version = "22.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}

application {
    // Define the main class for the application.
    mainClass = 'edu.ITSolutions.Export.App'
    mainModule = 'edu.ITSolutions.Export'
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--bind-services']
    launcher {
        name = 'MyApplication'
    }
}

tasks.named('test') {
   // Use JUnit Platform for unit tests.
   useJUnitPlatform()
}

tasks.withType(JavaCompile) {
   options.compilerArgs += ['--module-path', classpath.asPath, '--add-modules', 'javafx.controls,javafx.fxml']
}

task customFatJar(type: Jar) {
   manifest {
       attributes 'Main-Class': 'edu.ITSolutions.Export.App'  // Ensure this matches your main class
   }
   archiveBaseName = 'ShiftExporter'
   duplicatesStrategy = DuplicatesStrategy.EXCLUDE
   from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
   with jar
}

task createRuntimeImage(type: Exec) {
   dependsOn customFatJar
   doFirst {
       def javaHome = javaToolchains.compilerFor {
           languageVersion = JavaLanguageVersion.of(21)
       }.get().metadata.installationPath

       def jmodsPath = "C:\\Users\\berek\\Desktop\\Java\\javafx-sdk-22.0.2\\javafx-jmods-22.0.2"
       def customFatJar = "$buildDir/libs/ShiftExporter.jar"
       def outputDir = "$buildDir/runtime"

       println("Java Home: $javaHome")
       println("jmods path: $jmodsPath")
       println("Custom Jar Path: $customFatJar")
       println("Output Directory: $outputDir")

       //Clean up the output directory if it exists
       file(outputDir).deleteDir()

       commandLine = [
           "${javaHome}/bin/jlink",
           '--module-path', jmodsPath,
           '--add-modules', 'java.base,javafx.controls,javafx.fxml',
           '--output', "$buildDir/runtime"
       ]
   }
}

task packageApp(type: Exec) {
   dependsOn createRuntimeImage
   doFirst {
       def javaHome = javaToolchains.compilerFor {
           languageVersion = JavaLanguageVersion.of(21)
       }.get().metadata.installationPath
       def runtimeImagePath = "$buildDir/runtime"

       println("Packaging with Java Home: $javaHome")
       println("Runtime Image Path: $runtimeImagePath")

       commandLine = [
           "${javaHome}/bin/jpackage",
           '--name', 'ShiftExporter',
           '--input', "$buildDir/libs",
           '--main-jar', 'ShiftExporter.jar',
           '--main-class', 'edu.ITSolutions.Export.App',
           '--type', 'msi',
           '--dest', "$buildDir/installer",
           '--runtime-image', runtimeImagePath,
           '--win-menu',
           '--win-shortcut'
           // '--icon', 'path/to/icon.ico' // Replace with the actual path to your icon
       ]
   }
}